<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BFPG Talks</title>
        <link>http://talks.bfpg.org/</link>
        <description><![CDATA[The Brisbane Functional Programming Group holds both a monthly talks and hack nights to help people learn functional programing at all levels. We aim to foster an environment friendly to both beginners and industrial users of FP.]]></description>
        <atom:link href="http://talks.bfpg.org//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 08 Mar 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Functional Programming in Scala Chapters 3 & 4</title>
    <link>http://talks.bfpg.org//talks/2016-03-08.talk_fp_in_scala_3_4.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 3 & 4
        <small>by Sean Chalmers
          
            (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 3 & 4</h2>
      <p>
        By Sean Chalmers
        
          (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p><em>Chapter 3: Functional Data Structures</em></p>
<p>In this chapter, we'll learn the concept of functional data structures and how to work with them. We'll use this as an opportunity to introduce how data types are defined in functional programming, learn about the related technique of pattern matching, and get practice writing and generalizing pure functions.</p>
<p><em>Chapter 4: Functional Error Handling</em></p>
<p>In this chapter, we'll learn the basic principles for raising and handling errors functionally. The big idea is that we can represent failures and exceptions with ordinary values, and we can write higher-order functions that abstract out common patterns of error handling and recovery.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/mankyKitty/fpis-ch3-4-talk" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/SIQHiTK5Qi8" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    March  8, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168562/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 08 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-03-08.talk_fp_in_scala_3_4.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>A slideshow toolchain with ReST, Pandoc and LaTeX Beamer</title>
    <link>http://talks.bfpg.org//talks/2016-03-08.a_slideshow_toolchain_with_rest_pandoc_and_latex_beamer.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        A slideshow toolchain with ReST, Pandoc and LaTeX Beamer
        <small>by Fraser Tweedale
          
            (<a href="http://twitter.com/hackuador">@hackuador</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>A slideshow toolchain with ReST, Pandoc and LaTeX Beamer</h2>
      <p>
        By Fraser Tweedale
        
          (<a href="http://twitter.com/hackuador">@hackuador</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Giving technical presentations is a worthwhile and satisfying endeavour, but producing a quality slide deck can be a frustrating and time consuming activity. It needn't be.</p>
<p>In this talk I will show you my slide toolchain which, in brief, turns ReStructuredText (a lightweight markup format) into a PDF via Pandoc (a &quot;universal document converter&quot; written in Haskell), allowing me to focus on the structure and content of my presentations and not worry about formatting.</p>
<p>We will cover basic formatting, math, code, images, Unicode, foreign scripts, slide appearance and themes, and how to escape from ReST and access the full power of LaTeX when needed. There will also be a brief detour into Pandoc internals and a discussion of ways to vary the toolchain for alternative markup language preferences or output formats.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/frasertweedale/talks/tree/master/20160308-bfpg-pandoc-slides" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/vE7cNe44l-4" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    March  8, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168562/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 08 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-03-08.a_slideshow_toolchain_with_rest_pandoc_and_latex_beamer.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Functional Programming in Scala Chapters 1 & 2</title>
    <link>http://talks.bfpg.org//talks/2016-02-09.talk_fp_in_scala_1_2.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 1 & 2
        <small>by Ben Kolera
          
            (<a href="http://twitter.com/benkolera">@benkolera</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 1 & 2</h2>
      <p>
        By Ben Kolera
        
          (<a href="http://twitter.com/benkolera">@benkolera</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This is the first instalment of following through the FP in Scala book as part of our meetups.</p>
<p>Chapter 1 introduces the essence of functional programming and why we should care about it.</p>
<p>Chapter 2 is a crash course in scala syntax that will get you up and running ready to play for the next chapters.</p>
<p>The book has exercises in it: we're going to have time at the hack night for people to come in, work on and get help if they need it.</p>
<p>If you are planning to follow along, I'd highly recommend buying the (e)book and reading along: you'll learn better if you read and watch the talks.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/benkolera/talk-fp-in-scala-1-2" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/Sj12uS1Oc48" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    February  9, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/227857530/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 09 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-02-09.talk_fp_in_scala_1_2.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Haskell at Facebook</title>
    <link>http://talks.bfpg.org//talks/2016-02-09.haskell_at_facebook.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Haskell at Facebook
        <small>by Katie Miller
          
            (<a href="http://twitter.com/codemiller">@codemiller</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Haskell at Facebook</h2>
      <p>
        By Katie Miller
        
          (<a href="http://twitter.com/codemiller">@codemiller</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Katie is back in town and going to talk to us about something though at this point I'm not sure what. Given that she's been working at facebook in one of their Haskell teams I'm sure that will be awesome! :)</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    
    
  </div>
  <div class="panel-footer">
    February  9, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/227857530/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 09 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-02-09.haskell_at_facebook.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Unravelling 'bound'</title>
    <link>http://talks.bfpg.org//talks/2016-01-19.unravelling_bound.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Unravelling 'bound'
        <small>by David Laing
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Unravelling 'bound'</h2>
      <p>
        By David Laing
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Haskell makes it easy to write embedded domain specific languages (EDSLs).</p>
<p>Making the lamba calculus - variables, lambda abstraction and function application - part of our EDSLs gives us the ability to abstract and reuse fragments of programs in our EDSL, but can also add significant complexity to the implementation of the EDSL.</p>
<p>The <code>bound</code> library greatly simplifies this for us. This means we can add some functionality to our EDSL very cheaply, or possibly that it solves a problem we didn't know we had.</p>
<p>This talk will walk through why having the lambda calculus as part of your EDSL is a good thing, how to make that happen using <code>bound</code>, and some of the fun we can once we've done that.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    
    
  </div>
  <div class="panel-footer">
    January 19, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226707022/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 19 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-01-19.unravelling_bound.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Scala: More than just a better Java</title>
    <link>http://talks.bfpg.org//talks/2016-01-19.scala_more_than_just_a_better_java.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scala: More than just a better Java
        <small>by George Wilson
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scala: More than just a better Java</h2>
      <p>
        By George Wilson
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This talk aims to be a very accessible introduction to one of the most popular modern functional programming languages: Scala. Even those who have never come into contact with functional programming before should find real benefits within - particularly those who work with Java. Scala is a popular programming language which attempts to combine features from both object-oriented and functional programming. As Scala compiles to JVM bytecode, it is compatible with existing codebases written in other JVM languages, such as Java.</p>
<p>This talk will demonstrate some beneficial features of Scala, focusing on those which lend themselves to a functional style of program construction. These features include pattern matching, algebraic datatypes, and Scala's focus on immutable data.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    
    
  </div>
  <div class="panel-footer">
    January 19, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226707022/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 19 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-01-19.scala_more_than_just_a_better_java.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Swift & Rx</title>
    <link>http://talks.bfpg.org//talks/2015-11-10.swift_and_rx.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Swift & Rx
        <small>by Harish Subramanium
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Swift & Rx</h2>
      <p>
        By Harish Subramanium
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Making iOS applications can be a tricky mess of callbacks and fiddly resource deallocation. In this talk we will look at swift and the swift reactive extensions to see how functional programming can tame these challenges.</p>
<p>This talk will be code example focused but will require no prior knowledge of iOS dev or Rx.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/xMDarHcjPf0" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    November 10, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226040468/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 10 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-11-10.swift_and_rx.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Initial and Final Encodings</title>
    <link>http://talks.bfpg.org//talks/2015-11-10.initial_and_final_encodings.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Initial and Final Encodings
        <small>by Matt Peddie
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Initial and Final Encodings</h2>
      <p>
        By Matt Peddie
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Representing data as code and vice versa has a long history in functional programming and language theory. I'll present some techniques for changing how functions and data are represented that have significant engineering impact. The main technique I hope to communicate is the 'finally tagless' approach to EDSL implementation (and the associated engineering tradeoffs).</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://peddie.github.io/encodings/encodings.html" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/VT16jNk27I0" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    November 10, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226040468/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 10 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-11-10.initial_and_final_encodings.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Zippers</title>
    <link>http://talks.bfpg.org//talks/2015-10-13.zippers.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Zippers
        <small>by George Wilson
          
            (<a href="http://twitter.com/georgetalkscode">@georgetalkscode</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Zippers</h2>
      <p>
        By George Wilson
        
          (<a href="http://twitter.com/georgetalkscode">@georgetalkscode</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Immutable data-structures are the bread and butter of functional programming. Advantages of immutability include the persistence of old versions, the thread-safety, and the ability to reason about these structures. However, repeatedly modifying data deep within a nested immutable structure can have severe performance costs.</p>
<p>Structures known as 'zippers' allow for efficient traversal and modification of immutable data-structures. In this beginner-to-intermediate level talk, zippers will be motivated and introduced in Scala. A successful practical application of zippers in the Argonaut JSON library will be examined.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/woK7ntZRwXQ" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    October 13, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/225601844/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 13 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-10-13.zippers.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Parsers from Scratch</title>
    <link>http://talks.bfpg.org//talks/2015-10-13.parsers_from_scratch.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Parsers from Scratch
        <small>by Fraser Tweedale
          
            (<a href="http://twitter.com/hackuador">@hackuador</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Parsers from Scratch</h2>
      <p>
        By Fraser Tweedale
        
          (<a href="http://twitter.com/hackuador">@hackuador</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Parser combinators - functions to assemble big parsers from little ones - are an instructive example of composability and reuse made possible through FP, and building one is a useful (and common!) exercise for learners seeking through practical application a solid understanding of abstractions such as applicative functors and monads.</p>
<p>In this talk, we will briefly examine some parsing libraries available for Haskell and discuss their relative benefits and drawbacks. Then we will ignore everything we just saw and build a parser combinator library from scratch. Moreover, our parser will be abstracted over the &quot;whole&quot; and &quot;element&quot; input types - a more general result than most parsers.</p>
<p>I will conclude with a summary of some topics for further study including important parser design decisions, optimisations and efforts to unify parsing and pretty printing.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/frasertweedale/talks/tree/master/20151013-bfpg-parser-combinator" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/YNGGUvP3Egg" frameborder="0" allowfullscreen></iframe>
    </div>
    
    
  </div>
  <div class="panel-footer">
    October 13, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/225601844/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 13 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-10-13.parsers_from_scratch.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>

    </channel>
</rss>
