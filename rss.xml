<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BFPG Talks</title>
        <link>http://talks.bfpg.org/</link>
        <description><![CDATA[The Brisbane Functional Programming Group holds both a monthly talks and hack nights to help people learn functional programing at all levels. We aim to foster an environment friendly to both beginners and industrial users of FP.]]></description>
        <atom:link href="http://talks.bfpg.org//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 14 Jul 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Neophyte Rustacean</title>
    <link>http://talks.bfpg.org//talks/2015-07-14.neophyte_rustacean.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Neophyte Rustacean
        <small>by James Livingston
          
            (<a href="http://twitter.com/doctau">@doctau</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Neophyte Rustacean</h2>
      <p>
        By James Livingston
        
          (<a href="http://twitter.com/doctau">@doctau</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Rust is a new language that had it's first stable 1.0 release in May. Aimed at being an alternative to languages like C, C++ and Go, it is strict and impure, but is much safer than those. It borrows ideas from functional languages, and pays some attention to the last few decades of research.</p>
<p>We will walk through James' first month and a half with Rust, the triumphs of seeing it prevent bugs, the despair of fighting the borrow checker, and how well it works for some common tasks.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://slides.com/doctau/rust-intro/" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/lNDevmk1MbE" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    July 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830864/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 14 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-07-14.neophyte_rustacean.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Scripting with Haskell</title>
    <link>http://talks.bfpg.org//talks/2015-07-14.haskell_scripting.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scripting with Haskell
        <small>by Christopher McKay
          
            (<a href="http://twitter.com/errorific">@errorific</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scripting with Haskell</h2>
      <p>
        By Christopher McKay
        
          (<a href="http://twitter.com/errorific">@errorific</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>After you've gone and done that haskell beginners course and learned to think functionally you go to work with giant ideas of writing perfect functional code and building a better world. Then the suit from accounting turns up and needs a script to put a csv in a database and they need it right now, so you betray your bright new ideas and reach for ruby/perl/python/bash/go to do it fast because you know how to do such things in that language fast.</p>
<p>In this talk we'll be doing a code review of some simple haskell scripts that do common scripty tasks like taking input, reading things, printing things, calling webservices, reading csvs, and querying databases. Armed with these examples you should be prepared to introduce haskell to your workplace via dodgy scripts.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/Errorific/haskell-script-examples" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/8EZPuhYDRe8" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    July 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830864/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 14 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-07-14.haskell_scripting.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Escaping Cabal Hell with Nix</title>
    <link>http://talks.bfpg.org//talks/2015-06-09.nix.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Escaping Cabal Hell with Nix
        <small>by Steven Shaw
          
            (<a href="http://twitter.com/steshaw">@steshaw</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Escaping Cabal Hell with Nix</h2>
      <p>
        By Steven Shaw
        
          (<a href="http://twitter.com/steshaw">@steshaw</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>First, we'll introduce Nix, a purely functional package system, and highlight its advantages over widespread systems such as APT.</p>
<p>Next, we'll gain some familiariarity with the Nix commands. Learn how to: search for, install, upgrade and remove packages.</p>
<p>Finally, we'll learn how beat Cabal hell and accelerate your Haskell development with Nix. We'll set up Nix for Haskell development. Configure Nix environments containing all your favourite Haskell development tools. Most importantly, pull in library dependencies without recompiling all of hackage. Discover that there's no need to decide between per-project and shared sandboxes â€” you get to have your cake and eat it too!</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/mQd3s57n_2Y" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    June  9, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830861/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 09 Jun 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-06-09.nix.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Next Level MTL with Classy Optics</title>
    <link>http://talks.bfpg.org//talks/2015-06-09.next_level_mtl.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Next Level MTL with Classy Optics
        <small>by George Wilson
          
            (<a href="http://twitter.com/GeorgeTalksCode">@GeorgeTalksCode</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Next Level MTL with Classy Optics</h2>
      <p>
        By George Wilson
        
          (<a href="http://twitter.com/GeorgeTalksCode">@GeorgeTalksCode</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Many applications leverage monad transformer stacks to control IO effects, handle error conditions, pass configurations, and more. As the requirements of these applications grow, the complexity of these transformer stacks can grow proportionally. If a specific monad transformer stack is used in type signatures, then small changes to the stack can result in large changes to the code. This talk will demonstrate tools from the mtl and the lens library that allow each function's type to describe the required parts of a transformer stack, without depending on the concrete stack itself.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/GZPup5Iuaqw" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    June  9, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830861/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 09 Jun 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-06-09.next_level_mtl.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Ur/Web</title>
    <link>http://talks.bfpg.org//talks/2015-05-12.urweb.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Ur/Web
        <small>by Sean Chalmers
          
            (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Ur/Web</h2>
      <p>
        By Sean Chalmers
        
          (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Following on from our introduction to dependent types in AGDA, Sean showed us around Ur and Ur/Web, a full stack web language and web framework with an extremely very rich type-system.</p>
<p>Ur is a programming language in the tradition of ML and Haskell, but featuring a significantly richer type system. Ur is functional, pure, statically typed, and strict. Ur supports a powerful kind of metaprogramming based on row types.</p>
<p>Ur/Web is Ur plus a special standard library and associated rules for parsing and optimization. Ur/Web supports construction of dynamic web applications backed by SQL databases. The signature of the standard library is such that well-typed Ur/Web programs &quot;don't go wrong&quot; in a very broad sense.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/iPl1_69Vrw0" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    May 12, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830899/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 12 May 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-05-12.urweb.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Exact Real Arithmetic in Haskell</title>
    <link>http://talks.bfpg.org//talks/2015-05-12.exact_real_arithmetic.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Exact Real Arithmetic in Haskell
        <small>by Mitchell Riley
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Exact Real Arithmetic in Haskell</h2>
      <p>
        By Mitchell Riley
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Exact real arithmetic allows us to do computations without worrying about precision or rounding. In contrast with arbitrary precision arithmetic, we only need to specify an output precision and the details for intermediate steps are handled automatically.</p>
<p>In this talk we will implement exact real arithmetic in two very different ways. First, the &quot;fast binary Cauchy&quot; system amounts to representing each real as a function Natural -&gt; Rational, such that each successive output is a closer approximation to the true value than the last. The second system represents each real number as a continued fraction; an infinite tower of sums and reciprocals. Both systems benefit from a functional programming style and the resulting code is very simple to understand.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/LJQgYBQFtSE" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    May 12, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830899/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 12 May 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-05-12.exact_real_arithmetic.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Haskell: From noob to beginner</title>
    <link>http://talks.bfpg.org//talks/2015-04-14.haskell_from_noob_to_beginner.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Haskell: From noob to beginner
        <small>by Roman Joost
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Haskell: From noob to beginner</h2>
      <p>
        By Roman Joost
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This talk outlines how a beginner taking the CIS 194 course can prepare to use Haskell in real world projects. Take away lessons include pitfalls to avoid, struggles one might face on the transition from learner to practitioner and how to contribute to the Haskell community.</p>
<p>Roman is a software engineer at Red Hat, working on internal tools. His every day language is mainly Python. He has used XMonad for 6 years but never grokked how to configure the window manager and its components. Until now.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/NGD7I9K1bPo" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    April 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/219978892/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 14 Apr 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-04-14.haskell_from_noob_to_beginner.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>A dependently-typed Agda taster - Part II</title>
    <link>http://talks.bfpg.org//talks/2015-04-14.agda_2.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        A dependently-typed Agda taster - Part II
        <small>by Matthew Brecknell
          
            (<a href="http://twitter.com/mbrcknl">@mbrcknl</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>A dependently-typed Agda taster - Part II</h2>
      <p>
        By Matthew Brecknell
        
          (<a href="http://twitter.com/mbrcknl">@mbrcknl</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>We'll show how to build evidence that a certain thing can be found in a list, and how to use this evidence to safely retrieve a different thing from some other suitably-indexed heterogeneous list.</p>
<p>Finally, if we have time, we'll use what we just built to embed the simply-typed lambda calculus.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/7iAkFh9xOIc" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    April 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/219978892/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 14 Apr 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-04-14.agda_2.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Haskell FFI Basics</title>
    <link>http://talks.bfpg.org//talks/2015-03-24.haskell_ffi.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Haskell FFI Basics
        <small>by Fraser Tweedale
          
            (<a href="http://twitter.com/hackuador">@hackuador</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Haskell FFI Basics</h2>
      <p>
        By Fraser Tweedale
        
          (<a href="http://twitter.com/hackuador">@hackuador</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Wanting to make use of libraries written in other langauges (often C) is a common situation in high-level languages, and Haskell is no exception. This talk will introduce and demonstrate real-world use of Haskell's C foreign function interface (FFI), including how to deal with some common C idioms. We will examine the c2hs tool which simplifies bindings and review some other Haskell FFI tools.</p>
<p>Attendees who are comfortable with Haskell syntax and have a passing familiarity with C (especially pointers) will get the most out of this presentation.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/TP0ApVPLc24" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    March 24, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/219030264/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 24 Mar 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-03-24.haskell_ffi.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>A dependently-typed Agda taster</title>
    <link>http://talks.bfpg.org//talks/2015-03-24.agda_1.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        A dependently-typed Agda taster
        <small>by Matthew Brecknell
          
            (<a href="http://twitter.com/mbrcknl">@mbrcknl</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>A dependently-typed Agda taster</h2>
      <p>
        By Matthew Brecknell
        
          (<a href="http://twitter.com/mbrcknl">@mbrcknl</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Lets tuck into some term-indexed types!</p>
<p>Well see what it means to reify definitional equality of terms as a type, and how to use equality to rewrite types. Well reinvent Sigma and Pi types, starting from the simple sums and products we all know and love.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      <iframe width="560" height="315" src="https://www.youtube.com/embed/QyUVONbwHYE" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
  <div class="panel-footer">
    March 24, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/219030264/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 24 Mar 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-03-24.agda_1.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>

    </channel>
</rss>
