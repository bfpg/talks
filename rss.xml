<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BFPG Talks</title>
        <link>http://talks.bfpg.org/</link>
        <description><![CDATA[The Brisbane Functional Programming Group holds both a monthly talks and hack nights to help people learn functional programing at all levels. We aim to foster an environment friendly to both beginners and industrial users of FP.]]></description>
        <atom:link href="http://talks.bfpg.org//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 16 Jan 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Scala: More than just a better Java</title>
    <link>http://talks.bfpg.org//talks/2016-01-19.scala_more_than_just_a_better_java.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scala: More than just a better Java
        <small>by George Wilson
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scala: More than just a better Java</h2>
      <p>
        By George Wilson
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This talk aims to be a very accessible introduction to one of the most popular modern functional programming languages: Scala. Even those who have never come into contact with functional programming before should find real benefits within - particularly those who work with Java. Scala is a popular programming language which attempts to combine features from both object-oriented and functional programming. As Scala compiles to JVM bytecode, it is compatible with existing codebases written in other JVM languages, such as Java.</p>
<p>This talk will demonstrate some beneficial features of Scala, focusing on those which lend themselves to a functional style of program construction. These features include pattern matching, algebraic datatypes, and Scala's focus on immutable data.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      
    </div>
  </div>
  <div class="panel-footer">
    January 16, 2016 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226707022/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Sat, 16 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2016-01-19.scala_more_than_just_a_better_java.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Swift & Rx</title>
    <link>http://talks.bfpg.org//talks/2015-11-10.swift_and_rx.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Swift & Rx
        <small>by Harish Subramanium
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Swift & Rx</h2>
      <p>
        By Harish Subramanium
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Making iOS applications can be a tricky mess of callbacks and fiddly resource deallocation. In this talk we will look at swift and the swift reactive extensions to see how functional programming can tame these challenges.</p>
<p>This talk will be code example focused but will require no prior knowledge of iOS dev or Rx.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/xMDarHcjPf0" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    November 10, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226040468/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 10 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-11-10.swift_and_rx.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Initial and Final Encodings</title>
    <link>http://talks.bfpg.org//talks/2015-11-10.initial_and_final_encodings.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Initial and Final Encodings
        <small>by Matt Peddie
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Initial and Final Encodings</h2>
      <p>
        By Matt Peddie
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Representing data as code and vice versa has a long history in functional programming and language theory. I'll present some techniques for changing how functions and data are represented that have significant engineering impact. The main technique I hope to communicate is the 'finally tagless' approach to EDSL implementation (and the associated engineering tradeoffs).</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://peddie.github.io/encodings/encodings.html" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/VT16jNk27I0" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    November 10, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/226040468/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 10 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-11-10.initial_and_final_encodings.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Zippers</title>
    <link>http://talks.bfpg.org//talks/2015-10-13.zippers.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Zippers
        <small>by George Wilson
          
            (<a href="http://twitter.com/georgetalkscode">@georgetalkscode</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Zippers</h2>
      <p>
        By George Wilson
        
          (<a href="http://twitter.com/georgetalkscode">@georgetalkscode</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Immutable data-structures are the bread and butter of functional programming. Advantages of immutability include the persistence of old versions, the thread-safety, and the ability to reason about these structures. However, repeatedly modifying data deep within a nested immutable structure can have severe performance costs.</p>
<p>Structures known as 'zippers' allow for efficient traversal and modification of immutable data-structures. In this beginner-to-intermediate level talk, zippers will be motivated and introduced in Scala. A successful practical application of zippers in the Argonaut JSON library will be examined.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/woK7ntZRwXQ" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    October 13, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/225601844/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 13 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-10-13.zippers.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Parsers from Scratch</title>
    <link>http://talks.bfpg.org//talks/2015-10-13.parsers_from_scratch.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Parsers from Scratch
        <small>by Fraser Tweedale
          
            (<a href="http://twitter.com/hackuador">@hackuador</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Parsers from Scratch</h2>
      <p>
        By Fraser Tweedale
        
          (<a href="http://twitter.com/hackuador">@hackuador</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Parser combinators - functions to assemble big parsers from little ones - are an instructive example of composability and reuse made possible through FP, and building one is a useful (and common!) exercise for learners seeking through practical application a solid understanding of abstractions such as applicative functors and monads.</p>
<p>In this talk, we will briefly examine some parsing libraries available for Haskell and discuss their relative benefits and drawbacks. Then we will ignore everything we just saw and build a parser combinator library from scratch. Moreover, our parser will be abstracted over the &quot;whole&quot; and &quot;element&quot; input types - a more general result than most parsers.</p>
<p>I will conclude with a summary of some topics for further study including important parser design decisions, optimisations and efforts to unify parsing and pretty printing.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/frasertweedale/talks/tree/master/20151013-bfpg-parser-combinator" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/YNGGUvP3Egg" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    October 13, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/225601844/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 13 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-10-13.parsers_from_scratch.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Typesafe SQL in Haskell</title>
    <link>http://talks.bfpg.org//talks/2015-09-08.opaleye.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Typesafe SQL in Haskell
        <small>by Ben Kolera
          
            (<a href="http://twitter.com/benkolera">@benkolera</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Typesafe SQL in Haskell</h2>
      <p>
        By Ben Kolera
        
          (<a href="http://twitter.com/benkolera">@benkolera</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>SQL is a wonderful and powerful language for querying relational data, but as developers we're often forced to trade off between safety, composability and/or being forced to use a subset of what SQL can actually do.</p>
<p>In this talk we will examine Opaleye; a haskell DSL for interacting with Postgres that is both highly composable and will not generate SQL that fails at runtime if your haskell code compiles. Most impressively, it manages to do this while giving a DSL that still very much feels like and has the power of SQL (sorting, aggregation, unions, inner and outer joins).</p>
<p>This talk will cross over some intermediate level topics (Profunctors, Arrows, Lenses) but it should handwave them enough for things to make sense. All you should really need is a knowledge of SQL and an appreciation for type safety and composability. :)</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://opaleye.benkolera.com/#/" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
            <a class="btn btn-xs" href="https://github.com/benkolera/talk-opaleye/tree/master/code" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/A0oVn-GXOok" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    September  8, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221886016/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 08 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-09-08.opaleye.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Scalac Survival Guide</title>
    <link>http://talks.bfpg.org//talks/2015-08-11.scalac_survival_guide.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scalac Survival Guide
        <small>by Jason Zaugg
          
            (<a href="http://twitter.com/retronym">@retronym</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scalac Survival Guide</h2>
      <p>
        By Jason Zaugg
        
          (<a href="http://twitter.com/retronym">@retronym</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>BIO: Jason Zaugg once tinkered with the Scala compiler, got hooked, and now works full time on the Scala language at Typesafe.</p>
<p>As a programmer, tinkering with the implementation of the very language you work with (and think in) a uniquely satisfying endeavour. Scala offers lots of avenues to try this: you can author compiler plugins to perform static analysis, use macros to generate boilerplate, or modify the compiler to fix bugs or implement your own pet feature. More generally, thinking about the meta-aspects of the language invariably lead to a fresh perspective and deeper understanding that benefit your regular coding, too.</p>
<p>But all of these tasks can at times seem daunting, infuriating, or out of reach. This talk will issue you with the map, compass, flashlight, and roll of duct tape that you need to embark on this journey. It is drawn from the tools and techniques that I use on a daily basis when I'm working on the compiler.</p>
<p>Bring a Scala 2.11.6 REPL along if you want to code along, or skim the Reflection and Macro guides if you want to get a head start on some of the concepts we'll touch upon, or check out or Hacker's and Contributing guide to plan your first pull request.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/retronym/scalac-survival-guide" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/06oP5IXWveM" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    August 11, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221886013/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 11 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-08-11.scalac_survival_guide.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>The GHC API</title>
    <link>http://talks.bfpg.org//talks/2015-08-11.ghc_api.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        The GHC API
        <small>by Carlo Hamalainen
          
            (<a href="http://twitter.com/CarloHamalainen">@CarloHamalainen</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>The GHC API</h2>
      <p>
        By Carlo Hamalainen
        
          (<a href="http://twitter.com/CarloHamalainen">@CarloHamalainen</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>In his free time, Carlo wrote a tool called ghc-imported-from to help leverage the information from the compiler in code that he was writing.</p>
<p>In this talk Carlo will talk us through his journey, from zero code to his completed tool and the parts of the GHC API that he used along the way.</p>
<p>You should come away less fearful of the GHC API and maybe have a few ideas to add into tools of your own or add functionality to existing ones like ghc-mod.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/bfpg/bfpg-2015-08/blob/master/using-the-ghc-api/Slides.pdf" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
            <a class="btn btn-xs" href="https://github.com/bfpg/bfpg-2015-08" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/ppVz1YLKXzI" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    August 11, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221886013/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 11 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-08-11.ghc_api.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Neophyte Rustacean</title>
    <link>http://talks.bfpg.org//talks/2015-07-14.neophyte_rustacean.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Neophyte Rustacean
        <small>by James Livingston
          
            (<a href="http://twitter.com/doctau">@doctau</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Neophyte Rustacean</h2>
      <p>
        By James Livingston
        
          (<a href="http://twitter.com/doctau">@doctau</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Rust is a new language that had it's first stable 1.0 release in May. Aimed at being an alternative to languages like C, C++ and Go, it is strict and impure, but is much safer than those. It borrows ideas from functional languages, and pays some attention to the last few decades of research.</p>
<p>We will walk through James' first month and a half with Rust, the triumphs of seeing it prevent bugs, the despair of fighting the borrow checker, and how well it works for some common tasks.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://slides.com/doctau/rust-intro/" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/lNDevmk1MbE" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    July 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830864/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 14 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-07-14.neophyte_rustacean.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>
<item>
    <title>Scripting with Haskell</title>
    <link>http://talks.bfpg.org//talks/2015-07-14.haskell_scripting.html</link>
    <description><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scripting with Haskell
        <small>by Christopher McKay
          
            (<a href="http://twitter.com/errorific">@errorific</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scripting with Haskell</h2>
      <p>
        By Christopher McKay
        
          (<a href="http://twitter.com/errorific">@errorific</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>After you've gone and done that haskell beginners course and learned to think functionally you go to work with giant ideas of writing perfect functional code and building a better world. Then the suit from accounting turns up and needs a script to put a csv in a database and they need it right now, so you betray your bright new ideas and reach for ruby/perl/python/bash/go to do it fast because you know how to do such things in that language fast.</p>
<p>In this talk we'll be doing a code review of some simple haskell scripts that do common scripty tasks like taking input, reading things, printing things, calling webservices, reading csvs, and querying databases. Armed with these examples you should be prepared to introduce haskell to your workplace via dodgy scripts.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/Errorific/haskell-script-examples" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/8EZPuhYDRe8" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    July 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830864/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></description>
    <pubDate>Tue, 14 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://talks.bfpg.org//talks/2015-07-14.haskell_scripting.html</guid>
    <dc:creator>BFPG</dc:creator>
</item>

    </channel>
</rss>
