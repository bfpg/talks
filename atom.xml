<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>BFPG Talks</title>
    <link href="http://talks.bfpg.org//atom.xml" rel="self" />
    <link href="http://talks.bfpg.org/" />
    <id>http://talks.bfpg.org//atom.xml</id>
    <author>
        <name>BFPG</name>
        <email>exec@lists.bfpg.org</email>
    </author>
    <updated>2016-07-12T00:00:00Z</updated>
    <entry>
    <title>Functional Programming in Scala Chapters 11 & 12</title>
    <link href="http://talks.bfpg.org//talks/2016-07-12.fp_in_scala_11_12.html" />
    <id>http://talks.bfpg.org//talks/2016-07-12.fp_in_scala_11_12.html</id>
    <published>2016-07-12T00:00:00Z</published>
    <updated>2016-07-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 11 & 12
        <small>by Andrew Newman
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 11 & 12</h2>
      <p>
        By Andrew Newman
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>In Chapter 10, we introduced a simple algebraic structure, the monoid. This was our first instance of a completely abstract, purely algebraic interface, and it led us to think about interfaces in a new way. A useful interface may be defined only by a collection of operations related by laws.</p>
<p>In Chapter 11, we’ll continue this mode of thinking and apply it to the problem of factoring out code duplication across some of the libraries we wrote in parts 1 and 2. We’ll discover two new abstract interfaces, Functor and Monad, and get more general experience with spotting these sorts of abstract structures in our code.</p>
<p>In Chapter 12 we’ll learn about a related abstraction, applicative functors, which are less powerful than monads, but more general (and hence more common). The process of arriving at applicative functors will also provide some insight into how to discover such abstractions, and we’ll use some of these ideas to uncover another useful abstraction, traversable functors. It may take some time for the full significance and usefulness of these abstractions to sink in, but you’ll see them popping up again and again in your daily work with FP if you pay attention.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/AKH3LjGEN6U" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    July 12, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/231228805/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Lens First Haskell</title>
    <link href="http://talks.bfpg.org//talks/2016-06-14.lens_first_haskell.html" />
    <id>http://talks.bfpg.org//talks/2016-06-14.lens_first_haskell.html</id>
    <published>2016-06-14T00:00:00Z</published>
    <updated>2016-06-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Lens First Haskell
        <small>by Nick Partridge
          
            (<a href="http://twitter.com/nkpart">@nkpart</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Lens First Haskell</h2>
      <p>
        By Nick Partridge
        
          (<a href="http://twitter.com/nkpart">@nkpart</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>What do pipe bands have to do with first-class references to subparts of data types (i.e. lenses)? As the only pipe band drummer in the word interested in writing a Haskell program to generate their music, Nick Partridge is in a unique position to inform us.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/nkpart/score-writer" target="_blank" rel="noopener noreferrer">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/4MaaQmll8D0" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    June 14, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/230539384/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 9 & 10</title>
    <link href="http://talks.bfpg.org//talks/2016-06-14.fp_in_scala_9_10.html" />
    <id>http://talks.bfpg.org//talks/2016-06-14.fp_in_scala_9_10.html</id>
    <published>2016-06-14T00:00:00Z</published>
    <updated>2016-06-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 9 & 10
        <small>by Andrew McCluskey
          
            (<a href="http://twitter.com/ajmacca">@ajmacca</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 9 & 10</h2>
      <p>
        By Andrew McCluskey
        
          (<a href="http://twitter.com/ajmacca">@ajmacca</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Andrew McCluskey will be continuing our FP in Scala series, covering chapters 9 and 10. Chapter 9 brings part two to its conclusion with an example of algebraic design applied to a parser combinator library. Algebraic design focuses on identifying the abstract data types, operations over them, and laws that constrain them - the algebra - before considering a concrete implementation. Andrew will take you through the process at a high level and briefly discuss his experiences working through the chapter.</p>
<p>What do concatenating strings, adding integers, and parallel computations have in common? Andrew will explain in the second half of his talk, as he takes you through chapter 10. Chapter 10 covers Monoids, and is the first in part three of the book, which introduces some common patterns in functional programming and develops them into algebraic abstractions. While this might seem more theoretical than practical, Andrew plans on convincing you otherwise. He'll start by briefly covering why developing these abstractions is a useful thing to do and then dive into what a Monoid is, providing concrete examples as he goes.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/mt4Nl758DvM" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    June 14, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/230539384/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 7 & 8</title>
    <link href="http://talks.bfpg.org//talks/2016-05-10.talk_fp_in_scala_7_8.html" />
    <id>http://talks.bfpg.org//talks/2016-05-10.talk_fp_in_scala_7_8.html</id>
    <published>2016-05-10T00:00:00Z</published>
    <updated>2016-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 7 & 8
        <small>by Matt Newman
          
            (<a href="http://twitter.com/mdjnewman">@mdjnewman</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 7 & 8</h2>
      <p>
        By Matt Newman
        
          (<a href="http://twitter.com/mdjnewman">@mdjnewman</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Firstly, we delve into writing a library for doing parallel computation in a purely functional way. This gives us a chance not only to examine parallelism, but to also to examine how to write modular functional libraries by separating the description of a computation (via algebras) vs actually running them.</p>
<p>Secondly, we will write a property based testing library through which we can write high level specifications of the laws that we expect to hold for our program and have other machinery generate test data and provide counterexamples if our properties fail. Through this journey, we will start seeing the similarities between this API design and our parallel execution library, which will allow us to start teasing out the essence of writing purely functional libraries.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://mdjnewman.github.io/talk-fp-in-scala-7-8/" target="_blank" rel="noopener noreferrer">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/ZSKeOZMoWUg" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    May 10, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/230099578/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 5 & 6</title>
    <link href="http://talks.bfpg.org//talks/2016-04-19.talk_fp_in_scala_5_6.html" />
    <id>http://talks.bfpg.org//talks/2016-04-19.talk_fp_in_scala_5_6.html</id>
    <published>2016-04-19T00:00:00Z</published>
    <updated>2016-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 5 & 6
        <small>by John Vial
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 5 & 6</h2>
      <p>
        By John Vial
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This talk will be a brief overview of Chapters 5 &amp; 6 from Functional Programming in Scala.</p>
<p>In Chapter 5 we look at lazy evaluation and how this can allow you to operate over data structures of inifinite size.</p>
<p>In Chapter 6 we explore what it means to have state in a function program, and discover that it really just boils down to adding another parameter to the function and then applying an abstraction so that you can write functions that fit together without needing to know about the plumbing.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/VqJTaCOBlTw" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    April 19, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168565/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Purescript - An Experience Report</title>
    <link href="http://talks.bfpg.org//talks/2016-04-19.purescript_an_experience_report.html" />
    <id>http://talks.bfpg.org//talks/2016-04-19.purescript_an_experience_report.html</id>
    <published>2016-04-19T00:00:00Z</published>
    <updated>2016-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Purescript - An Experience Report
        <small>by Ben Kolera
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Purescript - An Experience Report</h2>
      <p>
        By Ben Kolera
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>One of the first tasks that I got asked to do at Ephox was to construct a proof of concept new feature in one of our editors. This involved integrating an open source library that kinda met the mark, changing and building up new code around it until it became a viable tool for exploring the idea with non-technical staff and customers.</p>
<p>As someone hired as a Scala developer and devops guy too far lost into the pure FP coolaid, I quickly found myself ill-equipped to develop complicated new features on the base of mutabily, no types and unbridled side effects.</p>
<p>This talk outlines Ben's experiences and learnings going from a javascript feature codebase codebase and replacing it with purescript. It won't teach you how to code purescript, but it should share enough war stories and insight to help you make the decision to learn and use it yourself.</p>
<p>Unfortunately given that the PoC was for a brand new feature Ben cannot share the actual code or talk about the feature in detail, but we'll hopefully have enough contrived examples to convey the message. If not, I'm happy to answer lots of questions if there are gaps.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/Tjk4H1eci2k" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    April 19, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168565/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 3 & 4</title>
    <link href="http://talks.bfpg.org//talks/2016-03-08.talk_fp_in_scala_3_4.html" />
    <id>http://talks.bfpg.org//talks/2016-03-08.talk_fp_in_scala_3_4.html</id>
    <published>2016-03-08T00:00:00Z</published>
    <updated>2016-03-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 3 & 4
        <small>by Sean Chalmers
          
            (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 3 & 4</h2>
      <p>
        By Sean Chalmers
        
          (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p><em>Chapter 3: Functional Data Structures</em></p>
<p>In this chapter, we'll learn the concept of functional data structures and how to work with them. We'll use this as an opportunity to introduce how data types are defined in functional programming, learn about the related technique of pattern matching, and get practice writing and generalizing pure functions.</p>
<p><em>Chapter 4: Functional Error Handling</em></p>
<p>In this chapter, we'll learn the basic principles for raising and handling errors functionally. The big idea is that we can represent failures and exceptions with ordinary values, and we can write higher-order functions that abstract out common patterns of error handling and recovery.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/mankyKitty/fpis-ch3-4-talk" target="_blank" rel="noopener noreferrer">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/SIQHiTK5Qi8" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    March  8, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168562/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>A slideshow toolchain with ReST, Pandoc and LaTeX Beamer</title>
    <link href="http://talks.bfpg.org//talks/2016-03-08.a_slideshow_toolchain_with_rest_pandoc_and_latex_beamer.html" />
    <id>http://talks.bfpg.org//talks/2016-03-08.a_slideshow_toolchain_with_rest_pandoc_and_latex_beamer.html</id>
    <published>2016-03-08T00:00:00Z</published>
    <updated>2016-03-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        A slideshow toolchain with ReST, Pandoc and LaTeX Beamer
        <small>by Fraser Tweedale
          
            (<a href="http://twitter.com/hackuador">@hackuador</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>A slideshow toolchain with ReST, Pandoc and LaTeX Beamer</h2>
      <p>
        By Fraser Tweedale
        
          (<a href="http://twitter.com/hackuador">@hackuador</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Giving technical presentations is a worthwhile and satisfying endeavour, but producing a quality slide deck can be a frustrating and time consuming activity. It needn't be.</p>
<p>In this talk I will show you my slide toolchain which, in brief, turns ReStructuredText (a lightweight markup format) into a PDF via Pandoc (a &quot;universal document converter&quot; written in Haskell), allowing me to focus on the structure and content of my presentations and not worry about formatting.</p>
<p>We will cover basic formatting, math, code, images, Unicode, foreign scripts, slide appearance and themes, and how to escape from ReST and access the full power of LaTeX when needed. There will also be a brief detour into Pandoc internals and a discussion of ways to vary the toolchain for alternative markup language preferences or output formats.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/frasertweedale/talks/tree/master/20160308-bfpg-pandoc-slides" target="_blank" rel="noopener noreferrer">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/vE7cNe44l-4" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    March  8, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168562/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 1 & 2</title>
    <link href="http://talks.bfpg.org//talks/2016-02-09.talk_fp_in_scala_1_2.html" />
    <id>http://talks.bfpg.org//talks/2016-02-09.talk_fp_in_scala_1_2.html</id>
    <published>2016-02-09T00:00:00Z</published>
    <updated>2016-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 1 & 2
        <small>by Ben Kolera
          
            (<a href="http://twitter.com/benkolera">@benkolera</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 1 & 2</h2>
      <p>
        By Ben Kolera
        
          (<a href="http://twitter.com/benkolera">@benkolera</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This is the first instalment of following through the FP in Scala book as part of our meetups.</p>
<p>Chapter 1 introduces the essence of functional programming and why we should care about it.</p>
<p>Chapter 2 is a crash course in scala syntax that will get you up and running ready to play for the next chapters.</p>
<p>The book has exercises in it: we're going to have time at the hack night for people to come in, work on and get help if they need it.</p>
<p>If you are planning to follow along, I'd highly recommend buying the (e)book and reading along: you'll learn better if you read and watch the talks.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/benkolera/talk-fp-in-scala-1-2" target="_blank" rel="noopener noreferrer">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/Sj12uS1Oc48" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    February  9, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/227857530/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell at Facebook</title>
    <link href="http://talks.bfpg.org//talks/2016-02-09.haskell_at_facebook.html" />
    <id>http://talks.bfpg.org//talks/2016-02-09.haskell_at_facebook.html</id>
    <published>2016-02-09T00:00:00Z</published>
    <updated>2016-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Haskell at Facebook
        <small>by Katie Miller
          
            (<a href="http://twitter.com/codemiller">@codemiller</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Haskell at Facebook</h2>
      <p>
        By Katie Miller
        
          (<a href="http://twitter.com/codemiller">@codemiller</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Katie is back in town and going to talk to us about something though at this point I'm not sure what. Given that she's been working at facebook in one of their Haskell teams I'm sure that will be awesome! :)</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
  </div>
  <div class="panel-footer">
    February  9, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/227857530/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>

</feed>
