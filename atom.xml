<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>BFPG Talks</title>
    <link href="http://talks.bfpg.org//atom.xml" rel="self" />
    <link href="http://talks.bfpg.org/" />
    <id>http://talks.bfpg.org//atom.xml</id>
    <author>
        <name>BFPG</name>
        <email>exec@lists.bfpg.org</email>
    </author>
    <updated>2016-10-11T00:00:00Z</updated>
    <entry>
    <title>Thinking with Types</title>
    <link href="http://talks.bfpg.org//talks/2016-10-11.thinking-with-types.html" />
    <id>http://talks.bfpg.org//talks/2016-10-11.thinking-with-types.html</id>
    <published>2016-10-11T00:00:00Z</published>
    <updated>2016-10-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Thinking with Types
        <small>by Ben Kolera
          
            (<a href="http://twitter.com/benkolera">@benkolera</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Thinking with Types</h2>
      <p>
        By Ben Kolera
        
          (<a href="http://twitter.com/benkolera">@benkolera</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>A core restriction of functional programming is that functions can only use their inputs to calculate their output and thus must always return the same output for a given input. This has the lovely effect that we can reason about what a function does purely by the the types of their inputs and outputs and use that knowledge when refactoring and composing functional programs.</p>
<p>The types are our key to reducing the possibilities of inputs and outputs of our functions. As we reduce the possibilities and weaken what our function can actually do, we make our function easier to reasonable about and thus easier to safely compose. In this talk, we will go through the tools that we have in the purescript programming language to make this local reasonability more and more powerful.</p>
<ul>
<li>Product types</li>
<li>Sum types</li>
<li>Parametricity</li>
<li>Parametricity + Typeclasses</li>
<li>Extensible Effect Tracking</li>
</ul>
<p>This should be a beginner level talk that will presume no knowledge of purescript, FP or Haskell-like syntax.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/-LPQ5D9MFkk" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    October 11, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/234104100/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>FRP with Events and Behaviors (Part 1)</title>
    <link href="http://talks.bfpg.org//talks/2016-09-13.frp-with-events-and-behaviours.html" />
    <id>http://talks.bfpg.org//talks/2016-09-13.frp-with-events-and-behaviours.html</id>
    <published>2016-09-13T00:00:00Z</published>
    <updated>2016-09-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        FRP with Events and Behaviors (Part 1)
        <small>by David Laing
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>FRP with Events and Behaviors (Part 1)</h2>
      <p>
        By David Laing
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Functional Reactive Programming (FRP) is an overloaded term.</p>
<p>The varieties of FRP that include events and behaviors are closer on the spectrum to the original meaning. Those systems have a lot of high value features - well-defined semantics, great composition - but examples and documentation probably aren't usually counted among them.</p>
<p>This talk will cover the basics of event-and-behavior FRP using the reactive-banana library.</p>
<p>All of the basic concepts will be covered, we'll be playing around with some interesting design opportunities that FRP allows. We'll be alternating between looking at the FRP combinators and building up example code, as we incrementally put together the FRP equivalent of the chat server described in Parallel and Concurrent Programming in Haskell.</p>
<p>Once we get to the end, we should be enthused, ready to give events-and-behaviors FRP a try, and ready for Part2 ...</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/GXW1jBijhlk" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    September 13, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/231851738/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>The Extended Functor Family</title>
    <link href="http://talks.bfpg.org//talks/2016-08-09.the-extended-functor-family.html" />
    <id>http://talks.bfpg.org//talks/2016-08-09.the-extended-functor-family.html</id>
    <published>2016-08-09T00:00:00Z</published>
    <updated>2016-08-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        The Extended Functor Family
        <small>by George Wilson
          
            (<a href="http://twitter.com/georgetalkscode">@georgetalkscode</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>The Extended Functor Family</h2>
      <p>
        By George Wilson
        
          (<a href="http://twitter.com/georgetalkscode">@georgetalkscode</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Functors are ubiquitous in modern strongly-typed functional programming. Every Haskell beginner will come across them as one of the first typeclasses introduced. Stronger structures such as Applicative and Monad often steal the spotlight, but there are many structures related to the humble Functor that go unnoticed. The goal of this talk is to show off and give an intuition for some of these other structures: contravariant functors, bifunctors, and profunctors. With some of these making their way into Haskell's standard library recently, now is a perfect time to be introduced to or brush up on these concepts. Code examples will use Haskell, but these techniques extend to any language with typeclasses or a similar mechanism, such as Scala's implicits.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
  </div>
  <div class="panel-footer">
    August  9, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/231851733/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>GHC Rewrite Rules</title>
    <link href="http://talks.bfpg.org//talks/2016-08-09.ghc-rewrite-rules.html" />
    <id>http://talks.bfpg.org//talks/2016-08-09.ghc-rewrite-rules.html</id>
    <published>2016-08-09T00:00:00Z</published>
    <updated>2016-08-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        GHC Rewrite Rules
        <small>by Fraser Tweedale
          
            (<a href="http://twitter.com/hackuador">@hackuador</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>GHC Rewrite Rules</h2>
      <p>
        By Fraser Tweedale
        
          (<a href="http://twitter.com/hackuador">@hackuador</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Fraser talks about some of the cool things that you can do with GHC rewrite rules.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/vDtMiTdC_n0" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    August  9, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/231851733/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Aviation</title>
    <link href="http://talks.bfpg.org//talks/2016-08-09.functional-programming-in-aviation.html" />
    <id>http://talks.bfpg.org//talks/2016-08-09.functional-programming-in-aviation.html</id>
    <published>2016-08-09T00:00:00Z</published>
    <updated>2016-08-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Aviation
        <small>by Tony Morris
          
            (<a href="http://twitter.com/dibblego">@dibblego</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Aviation</h2>
      <p>
        By Tony Morris
        
          (<a href="http://twitter.com/dibblego">@dibblego</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>In this talk &amp; demo, we have a look at some of the problems in general aviation as well as air transport (passenger &amp; freight). The current solutions to problems such as navigation, traffic and terrain collision avoidance and flight scheduling are clumsy, unreliable and impossible to extend. Other problems in aviation involve tragic events such as Malaysian Air Flight 370 and EgyptAir flight 804.</p>
<p>These problems continue to exist because of the properties of current avionics and the unfortunate data management techniques that must inevitably follow. Proprietary hardware and software continues to limit the field of aviation, where low-cost, open, extensible solutions can otherwise exist. As field experts in computer science, we have a duty to inform industry of our specialised endeavours so that they may exploit those advances.</p>
<p>A live demonstration of a software define radio device acting as a receiver for automatic aircraft transmissions (ADS-B) and location (GPS) will be deployed and the Haskell programming language will interface with the device to obtain live aircraft data. Queries of the live data are made using the Haskell lens library and various other appropriate data structures. Other sensors on this cheap, garage-made electronic device include barometric pressure, magnetic compass and accelerometer for roll, pitch &amp; yaw.</p>
<p>We all regularly wear our earphones to write code, in a tube that flies through unbreathable air at over half the speed of sound, monitored by a system developed in 1978. Meanwhile, John Backus was writing his ACM Turing-award winning paper on being liberated from von Neumann style. Not cool.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/cXm6bPQeaHs" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    August  9, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/231851733/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 11 & 12</title>
    <link href="http://talks.bfpg.org//talks/2016-07-12.fp_in_scala_11_12.html" />
    <id>http://talks.bfpg.org//talks/2016-07-12.fp_in_scala_11_12.html</id>
    <published>2016-07-12T00:00:00Z</published>
    <updated>2016-07-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 11 & 12
        <small>by Andrew Newman
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 11 & 12</h2>
      <p>
        By Andrew Newman
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>In Chapter 10, we introduced a simple algebraic structure, the monoid. This was our first instance of a completely abstract, purely algebraic interface, and it led us to think about interfaces in a new way. A useful interface may be defined only by a collection of operations related by laws.</p>
<p>In Chapter 11, we’ll continue this mode of thinking and apply it to the problem of factoring out code duplication across some of the libraries we wrote in parts 1 and 2. We’ll discover two new abstract interfaces, Functor and Monad, and get more general experience with spotting these sorts of abstract structures in our code.</p>
<p>In Chapter 12 we’ll learn about a related abstraction, applicative functors, which are less powerful than monads, but more general (and hence more common). The process of arriving at applicative functors will also provide some insight into how to discover such abstractions, and we’ll use some of these ideas to uncover another useful abstraction, traversable functors. It may take some time for the full significance and usefulness of these abstractions to sink in, but you’ll see them popping up again and again in your daily work with FP if you pay attention.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/AKH3LjGEN6U" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    July 12, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/231228805/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Lens First Haskell</title>
    <link href="http://talks.bfpg.org//talks/2016-06-14.lens_first_haskell.html" />
    <id>http://talks.bfpg.org//talks/2016-06-14.lens_first_haskell.html</id>
    <published>2016-06-14T00:00:00Z</published>
    <updated>2016-06-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Lens First Haskell
        <small>by Nick Partridge
          
            (<a href="http://twitter.com/nkpart">@nkpart</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Lens First Haskell</h2>
      <p>
        By Nick Partridge
        
          (<a href="http://twitter.com/nkpart">@nkpart</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>What do pipe bands have to do with first-class references to subparts of data types (i.e. lenses)? As the only pipe band drummer in the word interested in writing a Haskell program to generate their music, Nick Partridge is in a unique position to inform us.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/nkpart/score-writer" target="_blank" rel="noopener noreferrer">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/4MaaQmll8D0" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    June 14, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/230539384/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 9 & 10</title>
    <link href="http://talks.bfpg.org//talks/2016-06-14.fp_in_scala_9_10.html" />
    <id>http://talks.bfpg.org//talks/2016-06-14.fp_in_scala_9_10.html</id>
    <published>2016-06-14T00:00:00Z</published>
    <updated>2016-06-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 9 & 10
        <small>by Andrew McCluskey
          
            (<a href="http://twitter.com/ajmacca">@ajmacca</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 9 & 10</h2>
      <p>
        By Andrew McCluskey
        
          (<a href="http://twitter.com/ajmacca">@ajmacca</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Andrew McCluskey will be continuing our FP in Scala series, covering chapters 9 and 10. Chapter 9 brings part two to its conclusion with an example of algebraic design applied to a parser combinator library. Algebraic design focuses on identifying the abstract data types, operations over them, and laws that constrain them - the algebra - before considering a concrete implementation. Andrew will take you through the process at a high level and briefly discuss his experiences working through the chapter.</p>
<p>What do concatenating strings, adding integers, and parallel computations have in common? Andrew will explain in the second half of his talk, as he takes you through chapter 10. Chapter 10 covers Monoids, and is the first in part three of the book, which introduces some common patterns in functional programming and develops them into algebraic abstractions. While this might seem more theoretical than practical, Andrew plans on convincing you otherwise. He'll start by briefly covering why developing these abstractions is a useful thing to do and then dive into what a Monoid is, providing concrete examples as he goes.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/mt4Nl758DvM" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    June 14, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/230539384/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 7 & 8</title>
    <link href="http://talks.bfpg.org//talks/2016-05-10.talk_fp_in_scala_7_8.html" />
    <id>http://talks.bfpg.org//talks/2016-05-10.talk_fp_in_scala_7_8.html</id>
    <published>2016-05-10T00:00:00Z</published>
    <updated>2016-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 7 & 8
        <small>by Matt Newman
          
            (<a href="http://twitter.com/mdjnewman">@mdjnewman</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 7 & 8</h2>
      <p>
        By Matt Newman
        
          (<a href="http://twitter.com/mdjnewman">@mdjnewman</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Firstly, we delve into writing a library for doing parallel computation in a purely functional way. This gives us a chance not only to examine parallelism, but to also to examine how to write modular functional libraries by separating the description of a computation (via algebras) vs actually running them.</p>
<p>Secondly, we will write a property based testing library through which we can write high level specifications of the laws that we expect to hold for our program and have other machinery generate test data and provide counterexamples if our properties fail. Through this journey, we will start seeing the similarities between this API design and our parallel execution library, which will allow us to start teasing out the essence of writing purely functional libraries.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://mdjnewman.github.io/talk-fp-in-scala-7-8/" target="_blank" rel="noopener noreferrer">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/ZSKeOZMoWUg" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    May 10, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/230099578/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Functional Programming in Scala Chapters 5 & 6</title>
    <link href="http://talks.bfpg.org//talks/2016-04-19.talk_fp_in_scala_5_6.html" />
    <id>http://talks.bfpg.org//talks/2016-04-19.talk_fp_in_scala_5_6.html</id>
    <published>2016-04-19T00:00:00Z</published>
    <updated>2016-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Functional Programming in Scala Chapters 5 & 6
        <small>by John Vial
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Functional Programming in Scala Chapters 5 & 6</h2>
      <p>
        By John Vial
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This talk will be a brief overview of Chapters 5 &amp; 6 from Functional Programming in Scala.</p>
<p>In Chapter 5 we look at lazy evaluation and how this can allow you to operate over data structures of inifinite size.</p>
<p>In Chapter 6 we explore what it means to have state in a function program, and discover that it really just boils down to adding another parameter to the function and then applying an abstraction so that you can write functions that fit together without needing to know about the plumbing.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/VqJTaCOBlTw" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
    
  </div>
  <div class="panel-footer">
    April 19, 2016 - <a target="_blank" rel="noopener noreferrer" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/228168565/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>

</feed>
