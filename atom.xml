<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>BFPG Talks</title>
    <link href="http://talks.bfpg.org//atom.xml" rel="self" />
    <link href="http://talks.bfpg.org/" />
    <id>http://talks.bfpg.org//atom.xml</id>
    <author>
        <name>BFPG</name>
        <email>exec@lists.bfpg.org</email>
    </author>
    <updated>2015-09-08T00:00:00Z</updated>
    <entry>
    <title>Typesafe SQL in Haskell</title>
    <link href="http://talks.bfpg.org//talks/2015-09-08.opaleye.html" />
    <id>http://talks.bfpg.org//talks/2015-09-08.opaleye.html</id>
    <published>2015-09-08T00:00:00Z</published>
    <updated>2015-09-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Typesafe SQL in Haskell
        <small>by Ben Kolera
          
            (<a href="http://twitter.com/benkolera">@benkolera</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Typesafe SQL in Haskell</h2>
      <p>
        By Ben Kolera
        
          (<a href="http://twitter.com/benkolera">@benkolera</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>SQL is a wonderful and powerful language for querying relational data, but as developers we're often forced to trade off between safety, composability and/or being forced to use a subset of what SQL can actually do.</p>
<p>In this talk we will examine Opaleye; a haskell DSL for interacting with Postgres that is both highly composable and will not generate SQL that fails at runtime if your haskell code compiles. Most impressively, it manages to do this while giving a DSL that still very much feels like and has the power of SQL (sorting, aggregation, unions, inner and outer joins).</p>
<p>This talk will cross over some intermediate level topics (Profunctors, Arrows, Lenses) but it should handwave them enough for things to make sense. All you should really need is a knowledge of SQL and an appreciation for type safety and composability. :)</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://opaleye.benkolera.com/#/" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
            <a class="btn btn-xs" href="https://github.com/benkolera/talk-opaleye/tree/master/code" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/A0oVn-GXOok" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    September  8, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221886016/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Scalac Survival Guide</title>
    <link href="http://talks.bfpg.org//talks/2015-08-11.scalac_survival_guide.html" />
    <id>http://talks.bfpg.org//talks/2015-08-11.scalac_survival_guide.html</id>
    <published>2015-08-11T00:00:00Z</published>
    <updated>2015-08-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scalac Survival Guide
        <small>by Jason Zaugg
          
            (<a href="http://twitter.com/retronym">@retronym</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scalac Survival Guide</h2>
      <p>
        By Jason Zaugg
        
          (<a href="http://twitter.com/retronym">@retronym</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>BIO: Jason Zaugg once tinkered with the Scala compiler, got hooked, and now works full time on the Scala language at Typesafe.</p>
<p>As a programmer, tinkering with the implementation of the very language you work with (and think in) a uniquely satisfying endeavour. Scala offers lots of avenues to try this: you can author compiler plugins to perform static analysis, use macros to generate boilerplate, or modify the compiler to fix bugs or implement your own pet feature. More generally, thinking about the meta-aspects of the language invariably lead to a fresh perspective and deeper understanding that benefit your regular coding, too.</p>
<p>But all of these tasks can at times seem daunting, infuriating, or out of reach. This talk will issue you with the map, compass, flashlight, and roll of duct tape that you need to embark on this journey. It is drawn from the tools and techniques that I use on a daily basis when I'm working on the compiler.</p>
<p>Bring a Scala 2.11.6 REPL along if you want to code along, or skim the Reflection and Macro guides if you want to get a head start on some of the concepts we'll touch upon, or check out or Hacker's and Contributing guide to plan your first pull request.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/retronym/scalac-survival-guide" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/06oP5IXWveM" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    August 11, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221886013/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>The GHC API</title>
    <link href="http://talks.bfpg.org//talks/2015-08-11.ghc_api.html" />
    <id>http://talks.bfpg.org//talks/2015-08-11.ghc_api.html</id>
    <published>2015-08-11T00:00:00Z</published>
    <updated>2015-08-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        The GHC API
        <small>by Carlo Hamalainen
          
            (<a href="http://twitter.com/CarloHamalainen">@CarloHamalainen</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>The GHC API</h2>
      <p>
        By Carlo Hamalainen
        
          (<a href="http://twitter.com/CarloHamalainen">@CarloHamalainen</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>In his free time, Carlo wrote a tool called ghc-imported-from to help leverage the information from the compiler in code that he was writing.</p>
<p>In this talk Carlo will talk us through his journey, from zero code to his completed tool and the parts of the GHC API that he used along the way.</p>
<p>You should come away less fearful of the GHC API and maybe have a few ideas to add into tools of your own or add functionality to existing ones like ghc-mod.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="https://github.com/bfpg/bfpg-2015-08/blob/master/using-the-ghc-api/Slides.pdf" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
            <a class="btn btn-xs" href="https://github.com/bfpg/bfpg-2015-08" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/ppVz1YLKXzI" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    August 11, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221886013/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Neophyte Rustacean</title>
    <link href="http://talks.bfpg.org//talks/2015-07-14.neophyte_rustacean.html" />
    <id>http://talks.bfpg.org//talks/2015-07-14.neophyte_rustacean.html</id>
    <published>2015-07-14T00:00:00Z</published>
    <updated>2015-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Neophyte Rustacean
        <small>by James Livingston
          
            (<a href="http://twitter.com/doctau">@doctau</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Neophyte Rustacean</h2>
      <p>
        By James Livingston
        
          (<a href="http://twitter.com/doctau">@doctau</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Rust is a new language that had it's first stable 1.0 release in May. Aimed at being an alternative to languages like C, C++ and Go, it is strict and impure, but is much safer than those. It borrows ideas from functional languages, and pays some attention to the last few decades of research.</p>
<p>We will walk through James' first month and a half with Rust, the triumphs of seeing it prevent bugs, the despair of fighting the borrow checker, and how well it works for some common tasks.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
            <a class="btn btn-xs"href="http://slides.com/doctau/rust-intro/" target="_blank">Slides <i class="mdi-action-launch mdi-sm"></i></a>
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/lNDevmk1MbE" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    July 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830864/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Scripting with Haskell</title>
    <link href="http://talks.bfpg.org//talks/2015-07-14.haskell_scripting.html" />
    <id>http://talks.bfpg.org//talks/2015-07-14.haskell_scripting.html</id>
    <published>2015-07-14T00:00:00Z</published>
    <updated>2015-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Scripting with Haskell
        <small>by Christopher McKay
          
            (<a href="http://twitter.com/errorific">@errorific</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Scripting with Haskell</h2>
      <p>
        By Christopher McKay
        
          (<a href="http://twitter.com/errorific">@errorific</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>After you've gone and done that haskell beginners course and learned to think functionally you go to work with giant ideas of writing perfect functional code and building a better world. Then the suit from accounting turns up and needs a script to put a csv in a database and they need it right now, so you betray your bright new ideas and reach for ruby/perl/python/bash/go to do it fast because you know how to do such things in that language fast.</p>
<p>In this talk we'll be doing a code review of some simple haskell scripts that do common scripty tasks like taking input, reading things, printing things, calling webservices, reading csvs, and querying databases. Armed with these examples you should be prepared to introduce haskell to your workplace via dodgy scripts.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
            <a class="btn btn-xs" href="https://github.com/Errorific/haskell-script-examples" target="_blank">Source Code <i class="mdi-action-launch mdi-sm"></i></a>
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/8EZPuhYDRe8" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    July 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830864/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Escaping Cabal Hell with Nix</title>
    <link href="http://talks.bfpg.org//talks/2015-06-09.nix.html" />
    <id>http://talks.bfpg.org//talks/2015-06-09.nix.html</id>
    <published>2015-06-09T00:00:00Z</published>
    <updated>2015-06-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Escaping Cabal Hell with Nix
        <small>by Steven Shaw
          
            (<a href="http://twitter.com/steshaw">@steshaw</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Escaping Cabal Hell with Nix</h2>
      <p>
        By Steven Shaw
        
          (<a href="http://twitter.com/steshaw">@steshaw</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>First, we'll introduce Nix, a purely functional package system, and highlight its advantages over widespread systems such as APT.</p>
<p>Next, we'll gain some familiariarity with the Nix commands. Learn how to: search for, install, upgrade and remove packages.</p>
<p>Finally, we'll learn how beat Cabal hell and accelerate your Haskell development with Nix. We'll set up Nix for Haskell development. Configure Nix environments containing all your favourite Haskell development tools. Most importantly, pull in library dependencies without recompiling all of hackage. Discover that there's no need to decide between per-project and shared sandboxes — you get to have your cake and eat it too!</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/mQd3s57n_2Y" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    June  9, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830861/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Next Level MTL with Classy Optics</title>
    <link href="http://talks.bfpg.org//talks/2015-06-09.next_level_mtl.html" />
    <id>http://talks.bfpg.org//talks/2015-06-09.next_level_mtl.html</id>
    <published>2015-06-09T00:00:00Z</published>
    <updated>2015-06-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Next Level MTL with Classy Optics
        <small>by George Wilson
          
            (<a href="http://twitter.com/GeorgeTalksCode">@GeorgeTalksCode</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Next Level MTL with Classy Optics</h2>
      <p>
        By George Wilson
        
          (<a href="http://twitter.com/GeorgeTalksCode">@GeorgeTalksCode</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Many applications leverage monad transformer stacks to control IO effects, handle error conditions, pass configurations, and more. As the requirements of these applications grow, the complexity of these transformer stacks can grow proportionally. If a specific monad transformer stack is used in type signatures, then small changes to the stack can result in large changes to the code. This talk will demonstrate tools from the mtl and the lens library that allow each function's type to describe the required parts of a transformer stack, without depending on the concrete stack itself.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/GZPup5Iuaqw" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    June  9, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830861/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Ur/Web</title>
    <link href="http://talks.bfpg.org//talks/2015-05-12.urweb.html" />
    <id>http://talks.bfpg.org//talks/2015-05-12.urweb.html</id>
    <published>2015-05-12T00:00:00Z</published>
    <updated>2015-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Ur/Web
        <small>by Sean Chalmers
          
            (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Ur/Web</h2>
      <p>
        By Sean Chalmers
        
          (<a href="http://twitter.com/mankykitty">@mankykitty</a>)
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Following on from our introduction to dependent types in AGDA, Sean showed us around Ur and Ur/Web, a full stack web language and web framework with an extremely very rich type-system.</p>
<p>Ur is a programming language in the tradition of ML and Haskell, but featuring a significantly richer type system. Ur is functional, pure, statically typed, and strict. Ur supports a powerful kind of metaprogramming based on row types.</p>
<p>Ur/Web is Ur plus a special standard library and associated rules for parsing and optimization. Ur/Web supports construction of dynamic web applications backed by SQL databases. The signature of the standard library is such that well-typed Ur/Web programs &quot;don't go wrong&quot; in a very broad sense.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/iPl1_69Vrw0" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    May 12, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830899/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Exact Real Arithmetic in Haskell</title>
    <link href="http://talks.bfpg.org//talks/2015-05-12.exact_real_arithmetic.html" />
    <id>http://talks.bfpg.org//talks/2015-05-12.exact_real_arithmetic.html</id>
    <published>2015-05-12T00:00:00Z</published>
    <updated>2015-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Exact Real Arithmetic in Haskell
        <small>by Mitchell Riley
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Exact Real Arithmetic in Haskell</h2>
      <p>
        By Mitchell Riley
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>Exact real arithmetic allows us to do computations without worrying about precision or rounding. In contrast with arbitrary precision arithmetic, we only need to specify an output precision and the details for intermediate steps are handled automatically.</p>
<p>In this talk we will implement exact real arithmetic in two very different ways. First, the &quot;fast binary Cauchy&quot; system amounts to representing each real as a function Natural -&gt; Rational, such that each successive output is a closer approximation to the true value than the last. The second system represents each real number as a continued fraction; an infinite tower of sums and reciprocals. Both systems benefit from a functional programming style and the resulting code is very simple to understand.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/LJQgYBQFtSE" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    May 12, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/221830899/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell: From noob to beginner</title>
    <link href="http://talks.bfpg.org//talks/2015-04-14.haskell_from_noob_to_beginner.html" />
    <id>http://talks.bfpg.org//talks/2015-04-14.haskell_from_noob_to_beginner.html</id>
    <published>2015-04-14T00:00:00Z</published>
    <updated>2015-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <div class="visible-md-block visible-lg-block">
      <h2>
        Haskell: From noob to beginner
        <small>by Roman Joost
          
        </small>
      </h2>
    </div>
    <div class="visible-xs-block visible-sm-block">
      <h2>Haskell: From noob to beginner</h2>
      <p>
        By Roman Joost
        
      </p>
    </div>
  </div>
  <div class="panel-body">
    <p>This talk outlines how a beginner taking the CIS 194 course can prepare to use Haskell in real world projects. Take away lessons include pitfalls to avoid, struggles one might face on the transition from learner to practitioner and how to contribute to the Haskell community.</p>
<p>Roman is a software engineer at Red Hat, working on internal tools. His every day language is mainly Python. He has used XMonad for 6 years but never grokked how to configure the window manager and its components. Until now.</p>
    <div class="row" s>
        <div class="col-xs-12">
          
          
        </div>
    </div>
    <hr/>
    <div class="videoWrapper">
      
      <iframe width="560" height="315" src="https://www.youtube.com/embed/NGD7I9K1bPo" frameborder="0" allowfullscreen></iframe>
      
      
    </div>
  </div>
  <div class="panel-footer">
    April 14, 2015 - <a target="_blank" href="http://www.meetup.com/Brisbane-Functional-Programming-Group/events/219978892/">View on Meetup <i class="mdi-action-launch mdi-sm"></i></a>
  </div>
</div>
]]></summary>
</entry>

</feed>
